#ifndef PCF8574_h
#define PCF8574_h

#include "Wire.h"

#if ARDUINO >= 100
#else
#include "WProgram.h"
#endif

// Uncomment to enable printing out nice debug messages.
// #define PCF8574_DEBUG

// Uncomment for low memory usage this prevent use of complex DigitalInput structure and free 7byte of memory
// #define PCF8574_LOW_MEMORY

// Define where debug output will be printed.
#define DEBUG_PRINTER Serial

// Setup debug printing macros.
#ifdef PCF8574_DEBUG
#define DEBUG_PRINT(...) \
  { DEBUG_PRINTER.print(__VA_ARGS__); }
#define DEBUG_PRINTLN(...) \
  { DEBUG_PRINTER.println(__VA_ARGS__); }
#else
#define DEBUG_PRINT(...) \
  {}
#define DEBUG_PRINTLN(...) \
  {}
#endif

#define READ_ELAPSED_TIME 10

//#define P0  	B00000001
//#define P1  	B00000010
//#define P2  	B00000100
//#define P3  	B00001000
//#define P4  	B00010000
//#define P5  	B00100000
//#define P6  	B01000000
//#define P7  	B10000000
//
#define P0 0
#define P1 1
#define P2 2
#define P3 3
#define P4 4
#define P5 5
#define P6 6
#define P7 7

#include <math.h>


class PCF8574 {
public:

  PCF8574(uint8_t address);
  PCF8574(uint8_t address, uint8_t interruptPin, void (*interruptFunction)());

#if !defined(__AVR) && !defined(__STM32F1__) && !defined(TEENSYDUINO)
  PCF8574(uint8_t address, uint8_t sda, uint8_t scl);
  PCF8574(uint8_t address, uint8_t sda, uint8_t scl, uint8_t interruptPin, void (*interruptFunction)());
#endif

#ifdef ESP32
  ///// changes for second i2c bus
  PCF8574(TwoWire *pWire, uint8_t address);
  PCF8574(TwoWire *pWire, uint8_t address, uint8_t sda, uint8_t scl);

  PCF8574(TwoWire *pWire, uint8_t address, uint8_t interruptPin, void (*interruptFunction)());
  PCF8574(TwoWire *pWire, uint8_t address, uint8_t sda, uint8_t scl, uint8_t interruptPin, void (*interruptFunction)());
#endif

  void begin();
  void pinMode(uint8_t pin, uint8_t mode);

  void readBuffer(bool force = true);
  uint8_t digitalRead(uint8_t pin);
#ifndef PCF8574_LOW_MEMORY
  struct DigitalInput {
    uint8_t p0;
    uint8_t p1;
    uint8_t p2;
    uint8_t p3;
    uint8_t p4;
    uint8_t p5;
    uint8_t p6;
    uint8_t p7;
  } digitalInput;


  DigitalInput digitalReadAll(void);
#else
  byte digitalReadAll(void);
#endif
  void digitalWrite(uint8_t pin, uint8_t value);

private:
  uint8_t _address;

#if defined(__AVR) || defined(__STM32F1__)
  uint8_t _sda;
  uint8_t _scl;
#else
  uint8_t _sda = SDA;
  uint8_t _scl = SCL;
#endif

  TwoWire *_wire;

  bool _usingInterrupt = false;
  uint8_t _interruptPin = 2;
  void (*_interruptFunction)(){};

  byte writeMode = B00000000;
  byte readMode = B00000000;
  byte byteBuffered = B00000000;
  unsigned long lastReadMillis = 0;

  byte writeByteBuffered = B00000000;
};

#endif



PCF8574::PCF8574(uint8_t address) {
  _wire = &Wire;

  _address = address;
};

/**
 * Construcor
 * @param address: i2c address
 * @param interruptPin: pin to set interrupt
 * @param interruptFunction: function to call when interrupt raised
 */
PCF8574::PCF8574(uint8_t address, uint8_t interruptPin, void (*interruptFunction)()) {
  _wire = &Wire;

  _address = address;
  _interruptPin = interruptPin;
  _interruptFunction = interruptFunction;
  _usingInterrupt = true;
};

#if !defined(__AVR) && !defined(__STM32F1__) && !defined(TEENSYDUINO)
/**
	 * Constructor
	 * @param address: i2c address
	 * @param sda: sda pin
	 * @param scl: scl pin
	 */
PCF8574::PCF8574(uint8_t address, uint8_t sda, uint8_t scl) {
  _wire = &Wire;

  _address = address;
  _sda = sda;
  _scl = scl;
};

/**
	 * Constructor
	 * @param address: i2c address
	 * @param sda: sda pin
	 * @param scl: scl pin
	 * @param interruptPin: pin to set interrupt
 	 * @param interruptFunction: function to call when interrupt raised
	 */
PCF8574::PCF8574(uint8_t address, uint8_t sda, uint8_t scl, uint8_t interruptPin, void (*interruptFunction)()) {
  _wire = &Wire;

  _address = address;
  _sda = sda;
  _scl = scl;

  _interruptPin = interruptPin;
  _interruptFunction = interruptFunction;

  _usingInterrupt = true;
};
#endif

#ifdef ESP32
/**
	 * Constructor
	 * @param address: i2c address
	 */
PCF8574::PCF8574(TwoWire *pWire, uint8_t address) {
  _wire = pWire;

  _address = address;
};

/**
	 * Construcor
	 * @param address: i2c address
	 * @param interruptPin: pin to set interrupt
	 * @param interruptFunction: function to call when interrupt raised
	 */
PCF8574::PCF8574(TwoWire *pWire, uint8_t address, uint8_t interruptPin, void (*interruptFunction)()) {
  _wire = pWire;

  _address = address;
  _interruptPin = interruptPin;
  _interruptFunction = interruptFunction;
  _usingInterrupt = true;
};

/**
	 * Constructor
	 * @param address: i2c address
	 * @param sda: sda pin
	 * @param scl: scl pin
	 */
PCF8574::PCF8574(TwoWire *pWire, uint8_t address, uint8_t sda, uint8_t scl) {
  _wire = pWire;

  _address = address;
  _sda = sda;
  _scl = scl;
};

/**
	 * Constructor
	 * @param address: i2c address
	 * @param sda: sda pin
	 * @param scl: scl pin
	 * @param interruptPin: pin to set interrupt
	 * @param interruptFunction: function to call when interrupt raised
	 */
PCF8574::PCF8574(TwoWire *pWire, uint8_t address, uint8_t sda, uint8_t scl, uint8_t interruptPin, void (*interruptFunction)()) {
  _wire = pWire;

  _address = address;
  _sda = sda;
  _scl = scl;

  _interruptPin = interruptPin;
  _interruptFunction = interruptFunction;

  _usingInterrupt = true;
};
#endif

/**
 * wake up i2c controller
 */
void PCF8574::begin() {
#if !defined(__AVR) && !defined(__STM32F1__) && !defined(TEENSYDUINO)
  _wire->begin(_sda, _scl);
#else
  //			Default pin for AVR some problem on software emulation
  //			#define SCL_PIN _scl
  // 			#define SDA_PIN _sda
  _wire->begin();
#endif

  // Check if there are pins to set low
  if (writeMode > 0 || readMode > 0) {
    DEBUG_PRINTLN("Set write mode");
    _wire->beginTransmission(_address);
    DEBUG_PRINT(" ");
    DEBUG_PRINT("usedPin pin ");


    byte usedPin = writeMode | readMode;
    DEBUG_PRINTLN(~usedPin, BIN);

    _wire->write(~usedPin);

    DEBUG_PRINTLN("Start end trasmission if stop here check pullup resistor.");
    _wire->endTransmission();
  }

  // If using interrupt set interrupt value to pin
  if (_usingInterrupt) {
    DEBUG_PRINTLN("Using interrupt pin (not all pin is interrupted)");
    ::pinMode(_interruptPin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(_interruptPin), (*_interruptFunction), FALLING);
  }

  // inizialize last read
  lastReadMillis = millis();
}

/**
 * Set if fin is OUTPUT or INPUT
 * @param pin: pin to set
 * @param mode: mode, supported only INPUT or OUTPUT (to semplify)
 */
void PCF8574::pinMode(uint8_t pin, uint8_t mode) {
  DEBUG_PRINT("Set pin ");
  DEBUG_PRINT(pin);
  DEBUG_PRINT(" as ");
  DEBUG_PRINTLN(mode);

  if (mode == OUTPUT) {
    writeMode = writeMode | bit(pin);
    readMode = readMode & ~bit(pin);
    DEBUG_PRINT("writeMode: ");
    DEBUG_PRINT(writeMode, BIN);
    DEBUG_PRINT("readMode: ");
    DEBUG_PRINTLN(readMode, BIN);

  } else if (mode == INPUT) {
    writeMode = writeMode & ~bit(pin);
    readMode = readMode | bit(pin);
    DEBUG_PRINT("writeMode: ");
    DEBUG_PRINT(writeMode, BIN);
    DEBUG_PRINT("readMode: ");
    DEBUG_PRINTLN(readMode, BIN);
  } else {
    DEBUG_PRINTLN("Mode non supported by PCF8574")
  }
  DEBUG_PRINT("Write mode: ");
  DEBUG_PRINTLN(writeMode, BIN);
};

/**
 * Read value from i2c and bufferize it
 * @param force
 */
void PCF8574::readBuffer(bool force) {
  if (millis() > PCF8574::lastReadMillis + READ_ELAPSED_TIME || _usingInterrupt || force) {
    _wire->requestFrom(_address, (uint8_t)1);  // Begin transmission to PCF8574 with the buttons
    lastReadMillis = millis();
    if (_wire->available())  // If bytes are available to be recieved
    {
      byte iInput = _wire->read();  // Read a byte
      if ((iInput & readMode) > 0) {
        byteBuffered = byteBuffered | (byte)iInput;
      }
    }
  }
}

#ifndef PCF8574_LOW_MEMORY
/**
	 * Read value of all INPUT pin
	 * Debounce read more fast than 10millis, non managed for interrupt mode
	 * @return
	 */
PCF8574::DigitalInput PCF8574::digitalReadAll(void) {
  DEBUG_PRINTLN("Read from buffer");
  _wire->requestFrom(_address, (uint8_t)1);  // Begin transmission to PCF8574 with the buttons
  lastReadMillis = millis();
  if (_wire->available())  // If bytes are available to be recieved
  {
    DEBUG_PRINTLN("Data ready");
    byte iInput = _wire->read();  // Read a byte

    if ((iInput & readMode) > 0) {
      DEBUG_PRINT("Input ");
      DEBUG_PRINTLN((byte)iInput, BIN);

      byteBuffered = byteBuffered | (byte)iInput;
      DEBUG_PRINT("byteBuffered ");
      DEBUG_PRINTLN(byteBuffered, BIN);
    }
  }

  DEBUG_PRINT("Buffer value ");
  DEBUG_PRINTLN(byteBuffered, BIN);

  if ((bit(0) & readMode) > 0) digitalInput.p0 = ((byteBuffered & bit(0)) > 0) ? HIGH : LOW;
  if ((bit(1) & readMode) > 0) digitalInput.p1 = ((byteBuffered & bit(1)) > 0) ? HIGH : LOW;
  if ((bit(2) & readMode) > 0) digitalInput.p2 = ((byteBuffered & bit(2)) > 0) ? HIGH : LOW;
  if ((bit(3) & readMode) > 0) digitalInput.p3 = ((byteBuffered & bit(3)) > 0) ? HIGH : LOW;
  if ((bit(4) & readMode) > 0) digitalInput.p4 = ((byteBuffered & bit(4)) > 0) ? HIGH : LOW;
  if ((bit(5) & readMode) > 0) digitalInput.p5 = ((byteBuffered & bit(5)) > 0) ? HIGH : LOW;
  if ((bit(6) & readMode) > 0) digitalInput.p6 = ((byteBuffered & bit(6)) > 0) ? HIGH : LOW;
  if ((bit(7) & readMode) > 0) digitalInput.p7 = ((byteBuffered & bit(7)) > 0) ? HIGH : LOW;

  if ((readMode & byteBuffered) > 0) {
    byteBuffered = ~readMode & byteBuffered;
    DEBUG_PRINT("Buffer hight value readed set readed ");
    DEBUG_PRINTLN(byteBuffered, BIN);
  }
  DEBUG_PRINT("Return value ");
  return digitalInput;
};
#else
/**
	 * Read value of all INPUT pin in byte format for low memory usage
	 * Debounce read more fast than 10millis, non managed for interrupt mode
	 * @return
	 */
byte PCF8574::digitalReadAll(void) {
  DEBUG_PRINTLN("Read from buffer");
  _wire->requestFrom(_address, (uint8_t)1);  // Begin transmission to PCF8574 with the buttons
  lastReadMillis = millis();
  if (_wire->available())  // If bytes are available to be recieved
  {
    DEBUG_PRINTLN("Data ready");
    byte iInput = _wire->read();  // Read a byte

    if ((iInput & readMode) > 0) {
      DEBUG_PRINT("Input ");
      DEBUG_PRINTLN((byte)iInput, BIN);

      byteBuffered = byteBuffered | (byte)iInput;
      DEBUG_PRINT("byteBuffered ");
      DEBUG_PRINTLN(byteBuffered, BIN);
    }
  }

  DEBUG_PRINT("Buffer value ");
  DEBUG_PRINTLN(byteBuffered, BIN);

  byte byteRead = byteBuffered;

  if ((readMode & byteBuffered) > 0) {
    byteBuffered = ~readMode & byteBuffered;
    DEBUG_PRINT("Buffer hight value readed set readed ");
    DEBUG_PRINTLN(byteBuffered, BIN);
  }
  DEBUG_PRINT("Return value ");
  return byteRead;
};
#endif

/**
 * Read value of specified pin
 * Debounce read more fast than 10millis, non managed for interrupt mode
 * @param pin
 * @return
 */
uint8_t PCF8574::digitalRead(uint8_t pin) {
  uint8_t value = LOW;
  DEBUG_PRINT("Read pin ");
  DEBUG_PRINTLN(pin);
  // Check if pin already HIGH than read and prevent reread of i2c
  if ((bit(pin) & byteBuffered) > 0) {
    DEBUG_PRINTLN("Pin already up");
    value = HIGH;
  } else if ((/*(bit(pin) & byteBuffered)<=0 && */ millis() > PCF8574::lastReadMillis + READ_ELAPSED_TIME) /*|| _usingInterrupt*/) {
    DEBUG_PRINTLN("Read from buffer");
    _wire->requestFrom(_address, (uint8_t)1);  // Begin transmission to PCF8574 with the buttons
    lastReadMillis = millis();
    if (_wire->available())  // If bytes are available to be recieved
    {
      DEBUG_PRINTLN("Data ready");
      byte iInput = _wire->read();  // Read a byte

      if ((iInput & readMode) > 0) {
        DEBUG_PRINT("Input ");
        DEBUG_PRINTLN((byte)iInput, BIN);

        byteBuffered = byteBuffered | (byte)iInput;
        DEBUG_PRINT("byteBuffered ");
        DEBUG_PRINTLN(byteBuffered, BIN);

        if ((bit(pin) & byteBuffered) > 0) {
          value = HIGH;
        }
      }
    }
  }
  DEBUG_PRINT("Buffer value ");
  DEBUG_PRINTLN(byteBuffered, BIN);
  // If HIGH set to low to read buffer only one time
  if (value == HIGH) {
    byteBuffered = ~bit(pin) & byteBuffered;
    DEBUG_PRINT("Buffer hight value readed set readed ");
    DEBUG_PRINTLN(byteBuffered, BIN);
  }
  DEBUG_PRINT("Return value ");
  DEBUG_PRINTLN(value);
  return value;
};

/**
 * Write on pin
 * @param pin
 * @param value
 */
void PCF8574::digitalWrite(uint8_t pin, uint8_t value) {
  DEBUG_PRINTLN("Begin trasmission");
  _wire->beginTransmission(_address);  //Begin the transmission to PCF8574
  if (value == HIGH) {
    writeByteBuffered = writeByteBuffered | bit(pin);
  } else {
    writeByteBuffered = writeByteBuffered & ~bit(pin);
  }
  DEBUG_PRINT("Write data ");
  DEBUG_PRINT(writeByteBuffered, BIN);
  DEBUG_PRINT(" for pin ");
  DEBUG_PRINT(pin);
  DEBUG_PRINT(" bin value ");
  DEBUG_PRINT(bit(pin), BIN);
  DEBUG_PRINT(" value ");
  DEBUG_PRINTLN(value);

  writeByteBuffered = writeByteBuffered & writeMode;
  _wire->write(writeByteBuffered);
  DEBUG_PRINTLN("Start end trasmission if stop here check pullup resistor.");

  _wire->endTransmission();
};


int Piso1, Piso2, Piso3, Piso4;
int irP1, irP2, irP3, irP4;
int pisoActual = 0, b = -2, IR = 0;
int pisoIr = 1, piso_Nuevo = 0, Piso_final = 0, Piso_ir2 = 0, Piso_ir3 = 0;
int latchPin = 3;
int clockPin = 4;
int dataPin = 2;
int latchPin2 = 13;
int clockPin2 = 12;
int dataPin2 = 8;
int incendiocabina = 0, incendiopisos=0;
int velocidadM1 = 255;
int velocidadpuerta = 10;
int controlvelocidad = 9;
bool elevador_llego = true;
int peso = 0;
int i, Abier_Cerra = 0;
unsigned long tiempo = millis();
int Sensor_peso = A0;
byte Mi_bit = 0b11010000;
byte Motores = 0b00000000;
uint8_t PIN_P0;
uint8_t PIN_P1;
uint8_t PIN_P2;
uint8_t PIN_P3;
uint8_t PIN_P4;
uint8_t PIN_P5;
uint8_t PIN_P6;
uint8_t PIN_P7;
PCF8574 pcf8574(0x20);
void setup() {
  pinMode(Sensor_peso, INPUT);
  pcf8574.begin();
  pinMode(11, INPUT);  //Cabina incendios
  pinMode(A2, INPUT);  //Piso 1 y 2 incendios
  pinMode(A3, INPUT);  //Piso 3 y 4 incendios
  pinMode(controlvelocidad, OUTPUT);
  pinMode(velocidadpuerta, OUTPUT);
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(latchPin2, OUTPUT);
  pinMode(clockPin2, OUTPUT);
  pinMode(dataPin2, OUTPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);
  pinMode(7, INPUT);
  pinMode(A1, INPUT);
  pcf8574.pinMode(P0, INPUT);
  pcf8574.pinMode(P1, INPUT);
  pcf8574.pinMode(P2, INPUT);
  pcf8574.pinMode(P3, INPUT);
  pcf8574.pinMode(P4, INPUT);
  pcf8574.pinMode(P5, INPUT);
  pcf8574.pinMode(P6, INPUT);
  pcf8574.pinMode(P7, INPUT);
  digitalWrite(2, LOW);
  digitalWrite(3, LOW);
  digitalWrite(4, LOW);
  Mi_bit = 0b10000000;
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
  digitalWrite(latchPin, HIGH);
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  //Serial.begin(9600);
  PIN_P0 = pcf8574.digitalRead(P0);  // sensor puerta
  PIN_P1 = pcf8574.digitalRead(P1);  // Lee el valor del pin P1
  PIN_P2 = pcf8574.digitalRead(P2);  // Lee el valor del pin P2
  PIN_P3 = pcf8574.digitalRead(P3);  // Lee el valor del pin P3
  PIN_P4 = pcf8574.digitalRead(P4);  // Lee el valor del pin P4
  PIN_P5 = pcf8574.digitalRead(P5);  // Lee el valor del pin P5
  PIN_P6 = pcf8574.digitalRead(P6);  //boton abrir y cerrar
  PIN_P7 = pcf8574.digitalRead(P7);  //boton EMERGENCIA
  for (i = 0; i <= 5; i++) {
    PIN_P1 = pcf8574.digitalRead(P1);  // Lee el valor del pin P1
    PIN_P2 = pcf8574.digitalRead(P2);  // Lee el valor del pin P2
    PIN_P3 = pcf8574.digitalRead(P3);  // Lee el valor del pin P3
    PIN_P4 = pcf8574.digitalRead(P4);  // Lee el valor del pin P4
    PIN_P5 = pcf8574.digitalRead(P5);  // Lee el valor del pin P5
    PIN_P6 = pcf8574.digitalRead(P6);  //boton abrir y cerrar
    PIN_P7 = pcf8574.digitalRead(P7);  //boton EMERGENCIA
    incendiocabina = digitalRead(A2);      //Piso 1 y 2 incendios
    incendiopisos = digitalRead(A3);      //Piso 3 y 4 incendios
    if (PIN_P1 == 0) {
      pisoActual = 1;

    } else if (PIN_P2 == 0) {
      pisoActual = 2;

    } else if (PIN_P3 == 0) {
      pisoActual = 3;

    } else if (PIN_P4 == 0) {
      pisoActual = 4;
    }
    delay(20);
  }
  PIN_P5 = pcf8574.digitalRead(P5);  // Lee el valor del pin P5 puerta
  PIN_P6 = pcf8574.digitalRead(P6);  // boton abrir o cerrar
  pisoIr = pisoActual;
  Piso_final = pisoActual;
  Abier_Cerra = 0;
  b = 0;
}

void loop() {
  PIN_P0 = pcf8574.digitalRead(P0);  // sensor puerta
  PIN_P1 = pcf8574.digitalRead(P1);  // Lee el valor del pin P1
  PIN_P2 = pcf8574.digitalRead(P2);  // Lee el valor del pin P2
  PIN_P3 = pcf8574.digitalRead(P3);  // Lee el valor del pin P3
  PIN_P4 = pcf8574.digitalRead(P4);  // Lee el valor del pin P4
  PIN_P6 = pcf8574.digitalRead(P6);  // boton abrir o cerrar
  PIN_P7 = pcf8574.digitalRead(P7);  //boton EMERGENCIA
  peso = analogRead(Sensor_peso);    // La Resistencia es igual a la lectura del sensor (Analog 0)
  irP1 = digitalRead(5);
  irP2 = digitalRead(6);
  irP3 = digitalRead(7);
  irP4 = digitalRead(A1);
  incendiocabina = analogRead(A2);      //Cabina
  incendiopisos = analogRead(A3);      //Pisos
  //incendiocabina = digitalRead(11);  
  //limit swich
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  ///botone ir
  if (irP1 == 0) {
    pisoIr = 1;
  } else if (irP2 == 0) {
    pisoIr = 2;
  } else if (irP3 == 0) {
    pisoIr = 3;
  } else if (irP4 == 0) {
    pisoIr = 4;
  }
  //
  piso_Nuevo = pisoIr;
  if (pisoActual < piso_Nuevo) {
    IR = 1;
  } else if (pisoActual > piso_Nuevo) {
    IR = 2;
  }
  //subir
  if (IR == 1) {
    if (Piso_final == 0) {
      pisoIr = piso_Nuevo;
      Piso_ir3 = 0;
      Piso_ir2 = 0;
    } else if (Piso_ir2 > piso_Nuevo && Piso_ir2 != 0) {

      Piso_ir3 = piso_Nuevo;
      Piso_ir2 = Piso_ir2;
      Piso_final = Piso_final;

    } else if (Piso_ir2 < piso_Nuevo && Piso_ir3 != 0) {

      if (Piso_ir3 != piso_Nuevo) {
        Piso_final = piso_Nuevo;
      } else {
        Piso_ir2 = Piso_final;
        Piso_final = piso_Nuevo;
      }

    } else if (Piso_ir2 < piso_Nuevo && Piso_ir2 != 0) {

      Piso_ir3 = Piso_ir2;
      Piso_ir2 = Piso_final;
      Piso_final = piso_Nuevo;

    } else if (Piso_final < piso_Nuevo)  //menor
    {

      Piso_ir2 = Piso_final;
      Piso_final = piso_Nuevo;

    } else if (Piso_final > piso_Nuevo)  //mayor
    {
      Piso_ir2 = piso_Nuevo;
      Piso_final = Piso_final;
    }
  } else if (IR == 2) {
    //bajar
    if (Piso_final == 0) {
      pisoIr = piso_Nuevo;
      Piso_ir3 = 0;
      Piso_ir2 = 0;

    } else if (Piso_final == pisoActual && Piso_ir2 == 0 && pisoIr == 0) {
      pisoIr = piso_Nuevo;
      //Piso_final = pisoIr;
      Piso_ir3 = 0;
      Piso_ir2 = 0;
    } else if (Piso_final == pisoActual && piso_Nuevo < Piso_final) {
      Piso_final = piso_Nuevo;
      Piso_ir2 = piso_Nuevo;
      pisoIr = piso_Nuevo;
      Piso_ir3 = 0;

    } else if (Piso_ir2 > piso_Nuevo) {
      if (Piso_ir3 > piso_Nuevo) {

        if (Piso_ir2 > piso_Nuevo && piso_Nuevo == 1) {
          Piso_final = piso_Nuevo;
        } else if (Piso_ir2 > piso_Nuevo) {
          Piso_final = piso_Nuevo;
          Piso_ir2 = piso_Nuevo;
          Piso_ir3 = Piso_ir3;
        } else {
          Piso_final = Piso_final;
          Piso_ir2 = Piso_final;
          Piso_ir3 = Piso_ir3;
        }

      } else if (Piso_ir3 < piso_Nuevo) {
        Piso_ir3 = Piso_ir2;
        Piso_ir2 = piso_Nuevo;
        Piso_final = Piso_final;
      }

    } else if (Piso_ir3 < piso_Nuevo) {
      Piso_ir2 = Piso_ir3;
      Piso_ir3 = piso_Nuevo;

      Piso_final = Piso_final;
    } else if (Piso_ir2 > 0 && Piso_ir2 < piso_Nuevo && Piso_final < piso_Nuevo) {

      Piso_ir3 = piso_Nuevo;



    } else if (Piso_final < piso_Nuevo)  //menor
    {

      Piso_final = piso_Nuevo;
      Piso_ir2 = Piso_final;
      Piso_ir3 = Piso_ir2;

    } else if (Piso_final > piso_Nuevo)  //mayor
    {
      Piso_ir2 = Piso_final;
      if (Piso_final == 5) {
        Piso_final = pisoActual;
      } else {
        Piso_final = piso_Nuevo;
      }
    }
  }

  if (incendiocabina <= 1012 && incendiopisos <= 1012) {
    if (PIN_P0 == 0) {
      //Serial.print("\n puerta cerrada");
      if (peso < 967) {
        //
        if (Piso_ir3 > 0) {
          if (pisoActual == 1 && Piso_ir3 == 1) {
            Mi_bit = 0b10010000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (PIN_P1 == 0) {
              pisoIr3_reset();
            }

          } else if (pisoActual == 1 && Piso_ir3 == 2) {
            Mi_bit = 0b10001010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_1_2();
            if (PIN_P2 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 1 && Piso_ir3 == 3) {
            Mi_bit = 0b10011010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_1_3();
            if (PIN_P3 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 1 && Piso_ir2 == 4) {
            Mi_bit = 0b10000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_tres_pisos();
            if (PIN_P4 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 2 && Piso_ir3 == 1) {
            Mi_bit = 0b01010001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_piso_1_2();
            if (PIN_P1 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 2 && Piso_ir3 == 2) {
            Mi_bit = 0b01001000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (PIN_P2 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 2 && Piso_ir3 == 3) {
            Mi_bit = 0b01011010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_2_3();
            if (PIN_P3 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 2 && Piso_ir3 == 4) {
            Mi_bit = 0b01000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_dos_pisos();
            if (PIN_P4 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 3 && Piso_ir3 == 1) {
            Mi_bit = 0b11010001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_dos_pisos();
            if (PIN_P1 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 3 && Piso_ir3 == 2) {
            Mi_bit = 0b11001001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_un_piso();
            if (PIN_P2 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 3 && Piso_ir3 == 3) {
            Mi_bit = 0b11011000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (PIN_P3 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 3 && Piso_ir3 == 4) {
            Mi_bit = 0b11000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_3_4();
            if (PIN_P4 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 4 && Piso_ir3 == 1) {
            Mi_bit = 0b00110001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_tres_pisos();
            if (PIN_P1 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 4 && Piso_ir3 == 2) {
            Mi_bit = 0b00101001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_dos_pisos();
            if (PIN_P2 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 4 && Piso_ir3 == 3) {
            Mi_bit = 0b00111001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_piso_4_3();
            if (PIN_P3 == 0) {
              pisoIr3_reset();
            }
          } else if (pisoActual == 4 && Piso_ir3 == 4) {
            Mi_bit = 0b00100100;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (PIN_P4 == 0) {
              pisoIr3_reset();
            }
          }
        }
        if (Piso_ir2 > 0 && Piso_ir3 == 0) {
          if (pisoActual == 1 && Piso_ir2 == 1) {
            Mi_bit = 0b10010000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (PIN_P1 == 0) {
              pisoIr2_reset();
            }

          } else if (pisoActual == 1 && Piso_ir2 == 2) {
            Mi_bit = 0b10001010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_1_2();
            if (PIN_P2 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 1 && Piso_ir2 == 3) {
            Mi_bit = 0b10011010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_1_3();
            if (PIN_P3 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 1 && Piso_ir2 == 4) {
            Mi_bit = 0b10000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_tres_pisos();
            if (PIN_P4 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 2 && Piso_ir2 == 1) {
            Mi_bit = 0b01010001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_piso_1_2();
            if (PIN_P1 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 2 && Piso_ir2 == 2) {
            Mi_bit = 0b01001000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            parar();
            if (PIN_P2 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 2 && Piso_ir2 == 3) {
            Mi_bit = 0b01011010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_2_3();
            if (PIN_P3 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 2 && Piso_ir2 == 4) {
            Mi_bit = 0b01000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_dos_pisos();
            if (PIN_P4 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 3 && Piso_ir2 == 1) {
            Mi_bit = 0b11010001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_dos_pisos();
            if (PIN_P1 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 3 && Piso_ir2 == 2) {
            Mi_bit = 0b11001001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_un_piso();
            if (PIN_P2 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 3 && Piso_ir2 == 3) {
            Mi_bit = 0b11011000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            parar();
            if (PIN_P3 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 3 && Piso_ir2 == 4) {
            Mi_bit = 0b11000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_3_4();
            if (PIN_P4 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 4 && Piso_ir2 == 1) {
            Mi_bit = 0b00110001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_tres_pisos();
            if (PIN_P1 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 4 && Piso_ir2 == 2) {
            Mi_bit = 0b00101001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_dos_pisos();
            if (PIN_P2 == 0) {
              pisoIr2_reset();
            }
          } else if (pisoActual == 4 && Piso_ir2 == 3) {
            Mi_bit = 0b00111001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_piso_4_3();
            if (PIN_P3 == 0) {
              pisoIr2_reset();
            }

          } else if (pisoActual == 4 && Piso_ir2 == 4) {
            Mi_bit = 0b00100100;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (PIN_P4 == 0) {
              pisoIr2_reset();
            }
          }
        }
        if (pisoIr > 0 && Piso_ir2 == 0 && Piso_ir3 == 0) {

          if (pisoActual == 1 && pisoIr == 1) {
            Mi_bit = 0b10010000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (irP1 == 0) {
              abrir_puerta_boton();
            }
            if (PIN_P1 == 0) {
              pisoIr_reset();
            }
            Piso_final = pisoActual;

          } else if (pisoActual == 1 && pisoIr == 2) {
            Mi_bit = 0b10001010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_1_2();
            if (PIN_P2 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 1 && pisoIr == 3) {
            Mi_bit = 0b10011010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_1_3();
            if (PIN_P3 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 1 && pisoIr == 4) {
            Mi_bit = 0b10000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_tres_pisos();
            if (PIN_P4 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 2 && pisoIr == 1) {
            Mi_bit = 0b01010001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_piso_1_2();
            if (PIN_P1 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 2 && pisoIr == 2) {
            Mi_bit = 0b01001000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (irP2 == 0) {
              abrir_puerta_boton();
            }
            if (PIN_P2 == 0) {
              pisoIr_reset();
            }
            Piso_final = pisoActual;
          } else if (pisoActual == 2 && pisoIr == 3) {
            Mi_bit = 0b01011010;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_2_3();
            if (PIN_P3 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 2 && pisoIr == 4) {
            Mi_bit = 0b01000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_dos_pisos();
            if (PIN_P4 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 3 && pisoIr == 1) {
            Mi_bit = 0b11010001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_dos_pisos();
            if (PIN_P1 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 3 && pisoIr == 2) {
            Mi_bit = 0b11001001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_un_piso();
            if (PIN_P2 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 3 && pisoIr == 3) {
            Mi_bit = 0b11011000;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (irP3 == 0) {
              abrir_puerta_boton();
            }
            if (PIN_P3 == 0) {
              pisoIr_reset();
            }
            Piso_final = pisoActual;
          } else if (pisoActual == 3 && pisoIr == 4) {
            Mi_bit = 0b11000110;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            subir_piso_3_4();
            if (PIN_P4 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 4 && pisoIr == 1) {
            Mi_bit = 0b00110001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_tres_pisos();
            if (PIN_P1 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 4 && pisoIr == 2) {
            Mi_bit = 0b00101001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_dos_pisos();
            if (PIN_P2 == 0) {
              pisoIr_reset();
            }
          } else if (pisoActual == 4 && pisoIr == 3) {
            Mi_bit = 0b00111001;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            bajar_piso_4_3();
            if (PIN_P3 == 0) {
              pisoIr_reset();
            }

          } else if (pisoActual == 4 && pisoIr == 4) {
            Mi_bit = 0b00100100;
            digitalWrite(latchPin, LOW);
            shiftOut(dataPin, clockPin, LSBFIRST, Mi_bit);
            digitalWrite(latchPin, HIGH);
            if (irP4 == 0) {
              abrir_puerta_boton();
            }
            if (PIN_P4 == 0) {

              pisoIr_reset();
            }
            Piso_final = pisoActual;
          }
        } else {
          elevador_llego = false;
          b = -1;
          parar();
          if (PIN_P6 == 0) {
            if (Abier_Cerra == 0) {
              abrirpuerta();
              Abier_Cerra = 1;
              delay(50);
              cerrarpuerta();
            } else if (Abier_Cerra == 1) {
              cerrarpuerta();
              delay(50);
              Abier_Cerra = 0;
            }
          }
          if (PIN_P7 == 0) {
            Motores = 0b00000001;
            digitalWrite(latchPin2, LOW);
            shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
            digitalWrite(latchPin2, HIGH);
            delay(10);
          }
        }
      } else {
        Motores = 0b11000000;
        digitalWrite(latchPin2, LOW);
        shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
        digitalWrite(latchPin2, HIGH);
        analogWrite(controlvelocidad, 0);
        //Serial.print(" El elevador sobrepaso el peso total ");
      }
    } else if (PIN_P0 == 0) {

      if (PIN_P7 == 0) {
        Motores = 0b00001001;
        digitalWrite(latchPin2, LOW);
        shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
        digitalWrite(latchPin2, HIGH);
        delay(10);
      }
      PIN_P5 = pcf8574.digitalRead(P5);  // Lee el valor del pin P5 puerta
      if (PIN_P5 == 1) {
        Motores = 0b00000000;
        digitalWrite(latchPin2, LOW);
        shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
        digitalWrite(latchPin2, HIGH);
        analogWrite(controlvelocidad, 0);
      } else if (PIN_P5 == 0) {
        delay(10);
        Abier_Cerra = 1;
        delay(50);
        cerrarpuerta();
      }
    }
  } else if (incendiocabina >= 1014 && incendiopisos >= 1014) {
    Motores = 0b00000111;
    digitalWrite(latchPin2, LOW);
    shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
    digitalWrite(latchPin2, HIGH);
    delay(120);
  } else if (incendiocabina >= 1014 ) {
    Motores = 0b00000110;
    digitalWrite(latchPin2, LOW);
    shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
    digitalWrite(latchPin2, HIGH);
    delay(120);
  } else if (incendiopisos >= 1014) {
    Motores = 0b00000101;
    digitalWrite(latchPin2, LOW);
    shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
    digitalWrite(latchPin2, HIGH);
    delay(100);
    ;
  } 
  /* Serial.print(" \n");
   Serial.print(" Ir 1 : ");
  Serial.print(Piso_ir3);
   Serial.print(" Ir 2 : ");
  Serial.print(Piso_ir2);
  Serial.print(" Final : ");
  Serial.print(Piso_final);
   Serial.print(" B : ");
  Serial.print(b);*/
  delay(50);
}

void resetearviaje() {
  Piso_final = 0;
  piso_Nuevo = 0;
  Piso_ir2 = 0;
}
void subir_piso_1_2() {
  Motores = 0b10001000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }  analogWrite(controlvelocidad, 255);
  delay(70);
}
void subir_piso_1_3() {
  Motores = 0b10001000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }  analogWrite(controlvelocidad, 255);
  delay(70);
}
void bajar_piso_1_2() {
  delay(10);
  Motores = 0b01001000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(80);
}
void subir_piso_2_3() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b10001000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 245);
  delay(70);
}
void subir_piso_3_4() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b10000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(50);
}
void bajar_piso_4_3() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b01000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(60);
}
void subir_un_piso() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b10000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(70);
}
void subir_dos_pisos() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b10000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(80);
}
void subir_tres_pisos() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b10000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 245);
  delay(120);
}
void bajar_un_piso() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b01000000;
  digitalWrite(latchPin2, LOW);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(controlvelocidad, 255);
  delay(60);
}
void bajar_dos_pisos() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b01000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(70);
}
void bajar_tres_pisos() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  delay(10);
  Motores = 0b01000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  if (PIN_P1 == 0) {
    pisoActual = 1;
  } else if (PIN_P2 == 0) {
    pisoActual = 2;
  } else if (PIN_P3 == 0) {
    pisoActual = 3;
  } else if (PIN_P4 == 0) {
    pisoActual = 4;
  }
  analogWrite(controlvelocidad, 255);
  delay(60);
}
void parototal() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(controlvelocidad, 0);
  // Serial.print("\n Detenido");
}
void abrirpuerta() {
  Motores = 0b11010000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(velocidadpuerta, 200);
  delay(200);
}
void cerrarpuerta() {
  Motores = 0b11100000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(velocidadpuerta, 200);
  delay(200);
}
void abrir_puerta_boton() {
  abrirpuerta();
  delay(50);
  Motores = 0b00000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(controlvelocidad, 0);
  delay(50);
  cerrarpuerta();
  elevador_llego = false;
}
void parar() {
  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(controlvelocidad, 0);
  if (b > 1) {
    if (elevador_llego != false) {
      abrirpuerta();
      delay(50);
      Motores = 0b00000000;
      digitalWrite(latchPin2, LOW);
      shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
      digitalWrite(latchPin2, HIGH);
      analogWrite(controlvelocidad, 0);
      Abier_Cerra = 0;
      delay(20);
      Abier_Cerra = 1;
      delay(50);
      cerrarpuerta();
      elevador_llego = false;
    }
  }

  Motores = 0b11000000;
  digitalWrite(latchPin2, LOW);
  shiftOut(dataPin2, clockPin2, LSBFIRST, Motores);
  digitalWrite(latchPin2, HIGH);
  analogWrite(controlvelocidad, 0);
  b = b + 1;
  delay(10);
}
void pisoIr3_reset() {
  parar();
  Piso_ir3 = 0;
  pisoIr = Piso_final;
  elevador_llego = true;
  b = b + 2;
}
void pisoIr2_reset() {
  parar();
  Piso_ir2 = 0;
  pisoIr = Piso_final;
  elevador_llego = true;
  b = b + 1;
}
void pisoIr_reset() {
  parar();
  pisoIr = 0;
  piso_Nuevo = 0;
  Piso_ir2 = 0;
  elevador_llego = true;
  b = b + 1;
}
